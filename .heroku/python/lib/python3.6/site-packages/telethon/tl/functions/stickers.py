"""File generated by TLObjects' generator. All changes will be ERASED"""
from ...tl.tlobject import TLObject
from typing import Optional, List, Union, TYPE_CHECKING
import os
import struct
if TYPE_CHECKING:
    from ...tl.types import TypeInputUser, TypeInputDocument, TypeInputStickerSetItem, TypeInputStickerSet
    pass



class AddStickerToSetRequest(TLObject):
    CONSTRUCTOR_ID = 0x8653febe
    SUBCLASS_OF_ID = 0x9b704a5a

    def __init__(self, stickerset, sticker):
        """
        :param InputStickerSet stickerset:
        :param InputStickerSetItem sticker:

        :returns messages.StickerSet: Instance of StickerSet.
        """
        super().__init__()
        self.result = None
        self.content_related = True

        self.stickerset = stickerset  # type: TypeInputStickerSet
        self.sticker = sticker  # type: TypeInputStickerSetItem

    def to_dict(self):
        return {
            '_': 'AddStickerToSetRequest',
            'stickerset': None if self.stickerset is None else self.stickerset.to_dict(),
            'sticker': None if self.sticker is None else self.sticker.to_dict()
        }

    def __bytes__(self):
        return b''.join((
            b'\xbe\xfeS\x86',
            bytes(self.stickerset),
            bytes(self.sticker),
        ))

    @staticmethod
    def from_reader(reader):
        _stickerset = reader.tgread_object()
        _sticker = reader.tgread_object()
        return AddStickerToSetRequest(stickerset=_stickerset, sticker=_sticker)


class ChangeStickerPositionRequest(TLObject):
    CONSTRUCTOR_ID = 0xffb6d4ca
    SUBCLASS_OF_ID = 0x9b704a5a

    def __init__(self, sticker, position):
        """
        :param InputDocument sticker:
        :param int position:

        :returns messages.StickerSet: Instance of StickerSet.
        """
        super().__init__()
        self.result = None
        self.content_related = True

        self.sticker = sticker  # type: TypeInputDocument
        self.position = position  # type: int

    def to_dict(self):
        return {
            '_': 'ChangeStickerPositionRequest',
            'sticker': None if self.sticker is None else self.sticker.to_dict(),
            'position': self.position
        }

    def __bytes__(self):
        return b''.join((
            b'\xca\xd4\xb6\xff',
            bytes(self.sticker),
            struct.pack('<i', self.position),
        ))

    @staticmethod
    def from_reader(reader):
        _sticker = reader.tgread_object()
        _position = reader.read_int()
        return ChangeStickerPositionRequest(sticker=_sticker, position=_position)


class CreateStickerSetRequest(TLObject):
    CONSTRUCTOR_ID = 0x9bd86e6a
    SUBCLASS_OF_ID = 0x9b704a5a

    def __init__(self, user_id, title, short_name, stickers, masks=None):
        """
        :param bool | None masks:
        :param InputUser user_id:
        :param str title:
        :param str short_name:
        :param list[InputStickerSetItem] stickers:

        :returns messages.StickerSet: Instance of StickerSet.
        """
        super().__init__()
        self.result = None
        self.content_related = True

        self.masks = masks  # type: Optional[bool]
        self.user_id = user_id  # type: TypeInputUser
        self.title = title  # type: str
        self.short_name = short_name  # type: str
        self.stickers = stickers  # type: List[TypeInputStickerSetItem]

    def resolve(self, client, utils):
        self.user_id = utils.get_input_user(client.get_input_entity(self.user_id))

    def to_dict(self):
        return {
            '_': 'CreateStickerSetRequest',
            'masks': self.masks,
            'user_id': None if self.user_id is None else self.user_id.to_dict(),
            'title': self.title,
            'short_name': self.short_name,
            'stickers': [] if self.stickers is None else [None if x is None else x.to_dict() for x in self.stickers]
        }

    def __bytes__(self):
        return b''.join((
            b'jn\xd8\x9b',
            struct.pack('<I', (0 if self.masks is None or self.masks is False else 1)),
            bytes(self.user_id),
            TLObject.serialize_bytes(self.title),
            TLObject.serialize_bytes(self.short_name),
            b'\x15\xc4\xb5\x1c',struct.pack('<i', len(self.stickers)),b''.join(bytes(x) for x in self.stickers),
        ))

    @staticmethod
    def from_reader(reader):
        flags = reader.read_int()

        _masks = bool(flags & 1)
        _user_id = reader.tgread_object()
        _title = reader.tgread_string()
        _short_name = reader.tgread_string()
        reader.read_int()
        _stickers = []
        for _ in range(reader.read_int()):
            _x = reader.tgread_object()
            _stickers.append(_x)

        return CreateStickerSetRequest(user_id=_user_id, title=_title, short_name=_short_name, stickers=_stickers, masks=_masks)


class RemoveStickerFromSetRequest(TLObject):
    CONSTRUCTOR_ID = 0xf7760f51
    SUBCLASS_OF_ID = 0x9b704a5a

    def __init__(self, sticker):
        """
        :param InputDocument sticker:

        :returns messages.StickerSet: Instance of StickerSet.
        """
        super().__init__()
        self.result = None
        self.content_related = True

        self.sticker = sticker  # type: TypeInputDocument

    def to_dict(self):
        return {
            '_': 'RemoveStickerFromSetRequest',
            'sticker': None if self.sticker is None else self.sticker.to_dict()
        }

    def __bytes__(self):
        return b''.join((
            b'Q\x0fv\xf7',
            bytes(self.sticker),
        ))

    @staticmethod
    def from_reader(reader):
        _sticker = reader.tgread_object()
        return RemoveStickerFromSetRequest(sticker=_sticker)

