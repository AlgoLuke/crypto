"""File generated by TLObjects' generator. All changes will be ERASED"""
from ...tl.tlobject import TLObject
from typing import Optional, List, Union, TYPE_CHECKING
import os
import struct
if TYPE_CHECKING:
    pass



class FileGif(TLObject):
    CONSTRUCTOR_ID = 0xcae1aadf
    SUBCLASS_OF_ID = 0xf3a1e6f3

    def __init__(self):
        super().__init__()

    def to_dict(self):
        return {
            '_': 'FileGif'
        }

    def __bytes__(self):
        return b''.join((
            b'\xdf\xaa\xe1\xca',
        ))

    @staticmethod
    def from_reader(reader):
        return FileGif()


class FileJpeg(TLObject):
    CONSTRUCTOR_ID = 0x7efe0e
    SUBCLASS_OF_ID = 0xf3a1e6f3

    def __init__(self):
        super().__init__()

    def to_dict(self):
        return {
            '_': 'FileJpeg'
        }

    def __bytes__(self):
        return b''.join((
            b'\x0e\xfe~\x00',
        ))

    @staticmethod
    def from_reader(reader):
        return FileJpeg()


class FileMov(TLObject):
    CONSTRUCTOR_ID = 0x4b09ebbc
    SUBCLASS_OF_ID = 0xf3a1e6f3

    def __init__(self):
        super().__init__()

    def to_dict(self):
        return {
            '_': 'FileMov'
        }

    def __bytes__(self):
        return b''.join((
            b'\xbc\xeb\tK',
        ))

    @staticmethod
    def from_reader(reader):
        return FileMov()


class FileMp3(TLObject):
    CONSTRUCTOR_ID = 0x528a0677
    SUBCLASS_OF_ID = 0xf3a1e6f3

    def __init__(self):
        super().__init__()

    def to_dict(self):
        return {
            '_': 'FileMp3'
        }

    def __bytes__(self):
        return b''.join((
            b'w\x06\x8aR',
        ))

    @staticmethod
    def from_reader(reader):
        return FileMp3()


class FileMp4(TLObject):
    CONSTRUCTOR_ID = 0xb3cea0e4
    SUBCLASS_OF_ID = 0xf3a1e6f3

    def __init__(self):
        super().__init__()

    def to_dict(self):
        return {
            '_': 'FileMp4'
        }

    def __bytes__(self):
        return b''.join((
            b'\xe4\xa0\xce\xb3',
        ))

    @staticmethod
    def from_reader(reader):
        return FileMp4()


class FilePartial(TLObject):
    CONSTRUCTOR_ID = 0x40bc6f52
    SUBCLASS_OF_ID = 0xf3a1e6f3

    def __init__(self):
        super().__init__()

    def to_dict(self):
        return {
            '_': 'FilePartial'
        }

    def __bytes__(self):
        return b''.join((
            b'Ro\xbc@',
        ))

    @staticmethod
    def from_reader(reader):
        return FilePartial()


class FilePdf(TLObject):
    CONSTRUCTOR_ID = 0xae1e508d
    SUBCLASS_OF_ID = 0xf3a1e6f3

    def __init__(self):
        super().__init__()

    def to_dict(self):
        return {
            '_': 'FilePdf'
        }

    def __bytes__(self):
        return b''.join((
            b'\x8dP\x1e\xae',
        ))

    @staticmethod
    def from_reader(reader):
        return FilePdf()


class FilePng(TLObject):
    CONSTRUCTOR_ID = 0xa4f63c0
    SUBCLASS_OF_ID = 0xf3a1e6f3

    def __init__(self):
        super().__init__()

    def to_dict(self):
        return {
            '_': 'FilePng'
        }

    def __bytes__(self):
        return b''.join((
            b'\xc0cO\n',
        ))

    @staticmethod
    def from_reader(reader):
        return FilePng()


class FileUnknown(TLObject):
    CONSTRUCTOR_ID = 0xaa963b05
    SUBCLASS_OF_ID = 0xf3a1e6f3

    def __init__(self):
        super().__init__()

    def to_dict(self):
        return {
            '_': 'FileUnknown'
        }

    def __bytes__(self):
        return b''.join((
            b'\x05;\x96\xaa',
        ))

    @staticmethod
    def from_reader(reader):
        return FileUnknown()


class FileWebp(TLObject):
    CONSTRUCTOR_ID = 0x1081464c
    SUBCLASS_OF_ID = 0xf3a1e6f3

    def __init__(self):
        super().__init__()

    def to_dict(self):
        return {
            '_': 'FileWebp'
        }

    def __bytes__(self):
        return b''.join((
            b'LF\x81\x10',
        ))

    @staticmethod
    def from_reader(reader):
        return FileWebp()

